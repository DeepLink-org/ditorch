import glob
import json
import argparse


def test_case_id_json_to_scripts(json_path, test_case_num_per_process):
    with open(json_path, "rt") as f:
        test_case_ids = json.load(f)
    index = json_path.rfind("/") + 1
    new_script_path = json_path[:index] + "ditorch_run_" + json_path[index:] + ".sh"
    with open(new_script_path, "wt") as f:
        for module_name, test_names in test_case_ids.items():
            for test_name in test_names:
                while len(test_names) > 0:
                    test_name = "    " + (" " * 4).join(test_names[:test_case_num_per_process])
                    test_name = test_name.replace(" " * 4, "    \\\n    ")
                    test_names = test_names[test_case_num_per_process:]
                    command = f"python {module_name} {test_name} $EXTRA_ARGS"
                    f.write(command + "\n" * 2)
    print(f"Generate script file: {new_script_path}")


def dump_test_case_id_json_to_script(path, test_case_num_per_process):
    test_case_json_files = glob.glob(path + "/**/*.json", recursive=True)
    if len(test_case_json_files) == 0:
        raise ValueError(f"No test case id json files found in {path}")
    else:
        print(f"Found {len(test_case_json_files)} test case id json files in {path}")
    for test_case_json_file in test_case_json_files:
        test_case_id_json_to_scripts(test_case_json_file, test_case_num_per_process)


def parase_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--test_case_id_json_path",
        type=str,
        default="pytorch_test_result/test_case_ids",
        help="The directory to save the test case id json files generated by test case discovery tool",
    )
    parser.add_argument(
        "--test_case_num_per_process",
        type=int,
        default="50",
        help="The number of test cases per process",
    )
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = parase_args()
    dump_test_case_id_json_to_script(args.test_case_id_json_path, test_case_num_per_process=args.test_case_num_per_process)
